package com.hiroshi.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hiroshi.db.entity.ComicRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMIC_RECORD".
*/
public class ComicRecordDao extends AbstractDao<ComicRecord, Long> {

    public static final String TABLENAME = "COMIC_RECORD";

    /**
     * Properties of entity ComicRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Source = new Property(1, int.class, "source", false, "SOURCE");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Update = new Property(5, String.class, "update", false, "UPDATE");
        public final static Property Favorite = new Property(6, Long.class, "favorite", false, "FAVORITE");
        public final static Property History = new Property(7, Long.class, "history", false, "HISTORY");
        public final static Property Last_path = new Property(8, String.class, "last_path", false, "LAST_PATH");
        public final static Property Last_page = new Property(9, Integer.class, "last_page", false, "LAST_PAGE");
    };


    public ComicRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ComicRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMIC_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SOURCE\" INTEGER NOT NULL ," + // 1: source
                "\"PATH\" TEXT NOT NULL ," + // 2: path
                "\"TITLE\" TEXT NOT NULL ," + // 3: title
                "\"IMAGE\" TEXT NOT NULL ," + // 4: image
                "\"UPDATE\" TEXT NOT NULL ," + // 5: update
                "\"FAVORITE\" INTEGER," + // 6: favorite
                "\"HISTORY\" INTEGER," + // 7: history
                "\"LAST_PATH\" TEXT," + // 8: last_path
                "\"LAST_PAGE\" INTEGER);"); // 9: last_page
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMIC_RECORD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ComicRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSource());
        stmt.bindString(3, entity.getPath());
        stmt.bindString(4, entity.getTitle());
        stmt.bindString(5, entity.getImage());
        stmt.bindString(6, entity.getUpdate());
 
        Long favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(7, favorite);
        }
 
        Long history = entity.getHistory();
        if (history != null) {
            stmt.bindLong(8, history);
        }
 
        String last_path = entity.getLast_path();
        if (last_path != null) {
            stmt.bindString(9, last_path);
        }
 
        Integer last_page = entity.getLast_page();
        if (last_page != null) {
            stmt.bindLong(10, last_page);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ComicRecord readEntity(Cursor cursor, int offset) {
        ComicRecord entity = new ComicRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // source
            cursor.getString(offset + 2), // path
            cursor.getString(offset + 3), // title
            cursor.getString(offset + 4), // image
            cursor.getString(offset + 5), // update
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // favorite
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // history
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // last_path
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // last_page
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ComicRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSource(cursor.getInt(offset + 1));
        entity.setPath(cursor.getString(offset + 2));
        entity.setTitle(cursor.getString(offset + 3));
        entity.setImage(cursor.getString(offset + 4));
        entity.setUpdate(cursor.getString(offset + 5));
        entity.setFavorite(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setHistory(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLast_path(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLast_page(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ComicRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ComicRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
